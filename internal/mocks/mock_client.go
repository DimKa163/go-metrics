// Code generated by MockGen. DO NOT EDIT.
// Source: I:\GoLand\go-metrics\internal/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/DimKa163/go-metrics/internal/models"
)

// MockMetricClient is a mock of MetricClient interface.
type MockMetricClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricClientMockRecorder
}

// MockMetricClientMockRecorder is the mock recorder for MockMetricClient.
type MockMetricClientMockRecorder struct {
	mock *MockMetricClient
}

// NewMockMetricClient creates a new mock instance.
func NewMockMetricClient(ctrl *gomock.Controller) *MockMetricClient {
	mock := &MockMetricClient{ctrl: ctrl}
	mock.recorder = &MockMetricClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricClient) EXPECT() *MockMetricClientMockRecorder {
	return m.recorder
}

// BatchUpdate mocks base method.
func (m *MockMetricClient) BatchUpdate(metrics []*models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdate", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdate indicates an expected call of BatchUpdate.
func (mr *MockMetricClientMockRecorder) BatchUpdate(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockMetricClient)(nil).BatchUpdate), metrics)
}

// UpdateCounter mocks base method.
func (m *MockMetricClient) UpdateCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockMetricClientMockRecorder) UpdateCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockMetricClient)(nil).UpdateCounter), name, value)
}

// UpdateGauge mocks base method.
func (m *MockMetricClient) UpdateGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockMetricClientMockRecorder) UpdateGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockMetricClient)(nil).UpdateGauge), name, value)
}

// MockHttpExecuter is a mock of HttpExecuter interface.
type MockHttpExecuter struct {
	ctrl     *gomock.Controller
	recorder *MockHttpExecuterMockRecorder
}

// MockHttpExecuterMockRecorder is the mock recorder for MockHttpExecuter.
type MockHttpExecuterMockRecorder struct {
	mock *MockHttpExecuter
}

// NewMockHttpExecuter creates a new mock instance.
func NewMockHttpExecuter(ctrl *gomock.Controller) *MockHttpExecuter {
	mock := &MockHttpExecuter{ctrl: ctrl}
	mock.recorder = &MockHttpExecuterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpExecuter) EXPECT() *MockHttpExecuterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpExecuter) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpExecuterMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpExecuter)(nil).Do), req)
}
